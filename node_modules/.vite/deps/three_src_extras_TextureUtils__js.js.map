{
  "version": 3,
  "sources": ["../../three/src/constants.js", "../../three/src/extras/TextureUtils.js"],
  "sourcesContent": ["export const REVISION = '180';\r\n\r\n/**\r\n * Represents mouse buttons and interaction types in context of controls.\r\n *\r\n * @type {ConstantsMouse}\r\n * @constant\r\n */\r\nexport const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\r\n\r\n/**\r\n * Represents touch interaction types in context of controls.\r\n *\r\n * @type {ConstantsTouch}\r\n * @constant\r\n */\r\nexport const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\r\n\r\n/**\r\n * Disables face culling.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CullFaceNone = 0;\r\n\r\n/**\r\n * Culls back faces.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CullFaceBack = 1;\r\n\r\n/**\r\n * Culls front faces.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CullFaceFront = 2;\r\n\r\n/**\r\n * Culls both front and back faces.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CullFaceFrontBack = 3;\r\n\r\n/**\r\n * Gives unfiltered shadow maps - fastest, but lowest quality.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const BasicShadowMap = 0;\r\n\r\n/**\r\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const PCFShadowMap = 1;\r\n\r\n/**\r\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with\r\n * better soft shadows especially when using low-resolution shadow maps.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const PCFSoftShadowMap = 2;\r\n\r\n/**\r\n * Filters shadow maps using the Variance Shadow Map (VSM) algorithm.\r\n * When using VSMShadowMap all shadow receivers will also cast shadows.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const VSMShadowMap = 3;\r\n\r\n/**\r\n * Only front faces are rendered.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const FrontSide = 0;\r\n\r\n/**\r\n * Only back faces are rendered.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const BackSide = 1;\r\n\r\n/**\r\n * Both front and back faces are rendered.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DoubleSide = 2;\r\n\r\n/**\r\n * No blending is performed which effectively disables\r\n * alpha transparency.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NoBlending = 0;\r\n\r\n/**\r\n * The default blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NormalBlending = 1;\r\n\r\n/**\r\n * Represents additive blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AdditiveBlending = 2;\r\n\r\n/**\r\n * Represents subtractive blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SubtractiveBlending = 3;\r\n\r\n/**\r\n * Represents multiply blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MultiplyBlending = 4;\r\n\r\n/**\r\n * Represents custom blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CustomBlending = 5;\r\n\r\n/**\r\n * A `source + destination` blending equation.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AddEquation = 100;\r\n\r\n/**\r\n * A `source - destination` blending equation.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SubtractEquation = 101;\r\n\r\n/**\r\n * A `destination - source` blending equation.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ReverseSubtractEquation = 102;\r\n\r\n/**\r\n * A blend equation that uses the minimum of source and destination.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MinEquation = 103;\r\n\r\n/**\r\n * A blend equation that uses the maximum of source and destination.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MaxEquation = 104;\r\n\r\n/**\r\n * Multiplies all colors by `0`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ZeroFactor = 200;\r\n\r\n/**\r\n * Multiplies all colors by `1`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneFactor = 201;\r\n\r\n/**\r\n * Multiplies all colors by the source colors.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SrcColorFactor = 202;\r\n\r\n/**\r\n * Multiplies all colors by `1` minus each source color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusSrcColorFactor = 203;\r\n\r\n/**\r\n * Multiplies all colors by the source alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SrcAlphaFactor = 204;\r\n\r\n/**\r\n * Multiplies all colors by 1 minus the source alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusSrcAlphaFactor = 205;\r\n\r\n/**\r\n * Multiplies all colors by the destination alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DstAlphaFactor = 206;\r\n\r\n/**\r\n * Multiplies all colors by `1` minus the destination alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusDstAlphaFactor = 207;\r\n\r\n/**\r\n * Multiplies all colors by the destination color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DstColorFactor = 208;\r\n\r\n/**\r\n * Multiplies all colors by `1` minus each destination color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusDstColorFactor = 209;\r\n\r\n/**\r\n * Multiplies the RGB colors by the smaller of either the source alpha\r\n * value or the value of `1` minus the destination alpha value. The alpha\r\n * value is multiplied by `1`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SrcAlphaSaturateFactor = 210;\r\n\r\n/**\r\n * Multiplies all colors by a constant color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ConstantColorFactor = 211;\r\n\r\n/**\r\n * Multiplies all colors by `1` minus a constant color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusConstantColorFactor = 212;\r\n\r\n/**\r\n * Multiplies all colors by a constant alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ConstantAlphaFactor = 213;\r\n\r\n/**\r\n * Multiplies all colors by 1 minus a constant alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusConstantAlphaFactor = 214;\r\n\r\n/**\r\n * Never pass.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NeverDepth = 0;\r\n\r\n/**\r\n * Always pass.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AlwaysDepth = 1;\r\n\r\n/**\r\n * Pass if the incoming value is less than the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessDepth = 2;\r\n\r\n/**\r\n * Pass if the incoming value is less than or equal to the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessEqualDepth = 3;\r\n\r\n/**\r\n * Pass if the incoming value equals the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EqualDepth = 4;\r\n\r\n/**\r\n * Pass if the incoming value is greater than or equal to the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterEqualDepth = 5;\r\n\r\n/**\r\n * Pass if the incoming value is greater than the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterDepth = 6;\r\n\r\n/**\r\n * Pass if the incoming value is not equal to the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NotEqualDepth = 7;\r\n\r\n/**\r\n * Multiplies the environment map color with the surface color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MultiplyOperation = 0;\r\n\r\n/**\r\n * Uses reflectivity to blend between the two colors.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MixOperation = 1;\r\n\r\n/**\r\n * Adds the two colors.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AddOperation = 2;\r\n\r\n/**\r\n * No tone mapping is applied.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NoToneMapping = 0;\r\n\r\n/**\r\n * Linear tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LinearToneMapping = 1;\r\n\r\n/**\r\n * Reinhard tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ReinhardToneMapping = 2;\r\n\r\n/**\r\n * Cineon tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CineonToneMapping = 3;\r\n\r\n/**\r\n * ACES Filmic tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ACESFilmicToneMapping = 4;\r\n\r\n/**\r\n * Custom tone mapping.\r\n *\r\n * Expects a custom implementation by modifying shader code of the material's fragment shader.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CustomToneMapping = 5;\r\n\r\n/**\r\n * AgX tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AgXToneMapping = 6;\r\n\r\n/**\r\n * Neutral tone mapping.\r\n *\r\n * Implementation based on the Khronos 3D Commerce Group standard tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NeutralToneMapping = 7;\r\n\r\n/**\r\n * The skinned mesh shares the same world space as the skeleton.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const AttachedBindMode = 'attached';\r\n\r\n/**\r\n * The skinned mesh does not share the same world space as the skeleton.\r\n * This is useful when a skeleton is shared across multiple skinned meshes.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const DetachedBindMode = 'detached';\r\n\r\n/**\r\n * Maps textures using the geometry's UV coordinates.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UVMapping = 300;\r\n\r\n/**\r\n * Reflection mapping for cube textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CubeReflectionMapping = 301;\r\n\r\n/**\r\n * Refraction mapping for cube textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CubeRefractionMapping = 302;\r\n\r\n/**\r\n * Reflection mapping for equirectangular textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EquirectangularReflectionMapping = 303;\r\n\r\n/**\r\n * Refraction mapping for equirectangular textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EquirectangularRefractionMapping = 304;\r\n\r\n/**\r\n * Reflection mapping for PMREM textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CubeUVReflectionMapping = 306;\r\n\r\n/**\r\n * The texture will simply repeat to infinity.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RepeatWrapping = 1000;\r\n\r\n/**\r\n * The last pixel of the texture stretches to the edge of the mesh.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ClampToEdgeWrapping = 1001;\r\n\r\n/**\r\n * The texture will repeats to infinity, mirroring on each repeat.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MirroredRepeatWrapping = 1002;\r\n\r\n/**\r\n * Returns the value of the texture element that is nearest (in Manhattan distance)\r\n * to the specified texture coordinates.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NearestFilter = 1003;\r\n\r\n/**\r\n * Chooses the mipmap that most closely matches the size of the pixel being textured\r\n * and uses the `NearestFilter` criterion (the texel nearest to the center of the pixel)\r\n * to produce a texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NearestMipmapNearestFilter = 1004;\r\nexport const NearestMipMapNearestFilter = 1004; // legacy\r\n\r\n/**\r\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and\r\n * uses the `NearestFilter` criterion to produce a texture value from each mipmap.\r\n * The final texture value is a weighted average of those two values.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NearestMipmapLinearFilter = 1005;\r\nexport const NearestMipMapLinearFilter = 1005; // legacy\r\n\r\n/**\r\n * Returns the weighted average of the four texture elements that are closest to the specified\r\n * texture coordinates, and can include items wrapped or repeated from other parts of a texture,\r\n * depending on the values of `wrapS` and `wrapT`, and on the exact mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LinearFilter = 1006;\r\n\r\n/**\r\n * Chooses the mipmap that most closely matches the size of the pixel being textured and uses\r\n * the `LinearFilter` criterion (a weighted average of the four texels that are closest to the\r\n * center of the pixel) to produce a texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LinearMipmapNearestFilter = 1007;\r\nexport const LinearMipMapNearestFilter = 1007; // legacy\r\n\r\n/**\r\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses\r\n * the `LinearFilter` criterion to produce a texture value from each mipmap. The final texture value\r\n * is a weighted average of those two values.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LinearMipmapLinearFilter = 1008;\r\nexport const LinearMipMapLinearFilter = 1008; // legacy\r\n\r\n/**\r\n * An unsigned byte data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedByteType = 1009;\r\n\r\n/**\r\n * A byte data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ByteType = 1010;\r\n\r\n/**\r\n * A short data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ShortType = 1011;\r\n\r\n/**\r\n * An unsigned short data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedShortType = 1012;\r\n\r\n/**\r\n * An int data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const IntType = 1013;\r\n\r\n/**\r\n * An unsigned int data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedIntType = 1014;\r\n\r\n/**\r\n * A float data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const FloatType = 1015;\r\n\r\n/**\r\n * A half float data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const HalfFloatType = 1016;\r\n\r\n/**\r\n * An unsigned short 4_4_4_4 (packed) data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedShort4444Type = 1017;\r\n\r\n/**\r\n * An unsigned short 5_5_5_1 (packed) data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedShort5551Type = 1018;\r\n\r\n/**\r\n * An unsigned int 24_8 data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedInt248Type = 1020;\r\n\r\n/**\r\n * An unsigned int 5_9_9_9 (packed) data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedInt5999Type = 35902;\r\n\r\n/**\r\n * An unsigned int 10_11_11 (packed) data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedInt101111Type = 35899;\r\n\r\n/**\r\n * Discards the red, green and blue components and reads just the alpha component.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AlphaFormat = 1021;\r\n\r\n/**\r\n * Discards the alpha component and reads the red, green and blue component.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBFormat = 1022;\r\n\r\n/**\r\n * Reads the red, green, blue and alpha components.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBAFormat = 1023;\r\n\r\n/**\r\n * Reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DepthFormat = 1026;\r\n\r\n/**\r\n * Reads each element is a pair of depth and stencil values. The depth component of the pair is interpreted as\r\n * in `DepthFormat`. The stencil component is interpreted based on the depth + stencil internal format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DepthStencilFormat = 1027;\r\n\r\n/**\r\n * Discards the green, blue and alpha components and reads just the red component.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RedFormat = 1028;\r\n\r\n/**\r\n * Discards the green, blue and alpha components and reads just the red component. The texels are read as integers instead of floating point.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RedIntegerFormat = 1029;\r\n\r\n/**\r\n * Discards the alpha, and blue components and reads the red, and green components.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGFormat = 1030;\r\n\r\n/**\r\n * Discards the alpha, and blue components and reads the red, and green components. The texels are read as integers instead of floating point.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGIntegerFormat = 1031;\r\n\r\n/**\r\n * Discards the alpha component and reads the red, green and blue component. The texels are read as integers instead of floating point.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBIntegerFormat = 1032;\r\n\r\n/**\r\n * Reads the red, green, blue and alpha components. The texels are read as integers instead of floating point.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBAIntegerFormat = 1033;\r\n\r\n/**\r\n * A DXT1-compressed image in an RGB image format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_S3TC_DXT1_Format = 33776;\r\n\r\n/**\r\n * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_S3TC_DXT1_Format = 33777;\r\n\r\n/**\r\n * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_S3TC_DXT3_Format = 33778;\r\n\r\n/**\r\n * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3\r\n * compression in how the alpha compression is done.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_S3TC_DXT5_Format = 33779;\r\n\r\n/**\r\n * PVRTC RGB compression in 4-bit mode. One block for each 4×4 pixels.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_PVRTC_4BPPV1_Format = 35840;\r\n\r\n/**\r\n * PVRTC RGB compression in 2-bit mode. One block for each 8×4 pixels.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_PVRTC_2BPPV1_Format = 35841;\r\n\r\n/**\r\n * PVRTC RGBA compression in 4-bit mode. One block for each 4×4 pixels.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_PVRTC_4BPPV1_Format = 35842;\r\n\r\n/**\r\n * PVRTC RGBA compression in 2-bit mode. One block for each 8×4 pixels.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_PVRTC_2BPPV1_Format = 35843;\r\n\r\n/**\r\n * ETC1 RGB format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_ETC1_Format = 36196;\r\n\r\n/**\r\n * ETC2 RGB format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_ETC2_Format = 37492;\r\n\r\n/**\r\n * ETC2 RGBA format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ETC2_EAC_Format = 37496;\r\n\r\n/**\r\n * ASTC RGBA 4x4 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_4x4_Format = 37808;\r\n\r\n/**\r\n * ASTC RGBA 5x4 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_5x4_Format = 37809;\r\n\r\n/**\r\n * ASTC RGBA 5x5 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_5x5_Format = 37810;\r\n\r\n/**\r\n * ASTC RGBA 6x5 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_6x5_Format = 37811;\r\n\r\n/**\r\n * ASTC RGBA 6x6 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_6x6_Format = 37812;\r\n\r\n/**\r\n * ASTC RGBA 8x5 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_8x5_Format = 37813;\r\n\r\n/**\r\n * ASTC RGBA 8x6 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_8x6_Format = 37814;\r\n\r\n/**\r\n * ASTC RGBA 8x8 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_8x8_Format = 37815;\r\n\r\n/**\r\n * ASTC RGBA 10x5 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_10x5_Format = 37816;\r\n\r\n/**\r\n * ASTC RGBA 10x6 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_10x6_Format = 37817;\r\n\r\n/**\r\n * ASTC RGBA 10x8 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_10x8_Format = 37818;\r\n\r\n/**\r\n * ASTC RGBA 10x10 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_10x10_Format = 37819;\r\n\r\n/**\r\n * ASTC RGBA 12x10 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_12x10_Format = 37820;\r\n\r\n/**\r\n * ASTC RGBA 12x12 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_12x12_Format = 37821;\r\n\r\n/**\r\n * BPTC RGBA format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_BPTC_Format = 36492;\r\n\r\n/**\r\n * BPTC Signed RGB format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_BPTC_SIGNED_Format = 36494;\r\n\r\n/**\r\n * BPTC Unsigned RGB format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_BPTC_UNSIGNED_Format = 36495;\r\n\r\n/**\r\n * RGTC1 Red format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RED_RGTC1_Format = 36283;\r\n\r\n/**\r\n * RGTC1 Signed Red format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SIGNED_RED_RGTC1_Format = 36284;\r\n\r\n/**\r\n * RGTC2 Red Green format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RED_GREEN_RGTC2_Format = 36285;\r\n\r\n/**\r\n * RGTC2 Signed Red Green format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SIGNED_RED_GREEN_RGTC2_Format = 36286;\r\n\r\n/**\r\n * Animations are played once.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LoopOnce = 2200;\r\n\r\n/**\r\n * Animations are played with a chosen number of repetitions, each time jumping from\r\n * the end of the clip directly to its beginning.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LoopRepeat = 2201;\r\n\r\n/**\r\n * Animations are played with a chosen number of repetitions, alternately playing forward\r\n * and backward.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LoopPingPong = 2202;\r\n\r\n/**\r\n * Discrete interpolation mode for keyframe tracks.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const InterpolateDiscrete = 2300;\r\n\r\n/**\r\n * Linear interpolation mode for keyframe tracks.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const InterpolateLinear = 2301;\r\n\r\n/**\r\n * Smooth interpolation mode for keyframe tracks.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const InterpolateSmooth = 2302;\r\n\r\n/**\r\n * Zero curvature ending for animations.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ZeroCurvatureEnding = 2400;\r\n\r\n/**\r\n * Zero slope ending for animations.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ZeroSlopeEnding = 2401;\r\n\r\n/**\r\n * Wrap around ending for animations.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const WrapAroundEnding = 2402;\r\n\r\n/**\r\n * Default animation blend mode.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NormalAnimationBlendMode = 2500;\r\n\r\n/**\r\n * Additive animation blend mode. Can be used to layer motions on top of\r\n * each other to build complex performances from smaller re-usable assets.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AdditiveAnimationBlendMode = 2501;\r\n\r\n/**\r\n * For every three vertices draw a single triangle.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const TrianglesDrawMode = 0;\r\n\r\n/**\r\n * For each vertex draw a triangle from the last three vertices.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const TriangleStripDrawMode = 1;\r\n\r\n/**\r\n * For each vertex draw a triangle from the first vertex and the last two vertices.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const TriangleFanDrawMode = 2;\r\n\r\n/**\r\n * Basic depth packing.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const BasicDepthPacking = 3200;\r\n\r\n/**\r\n * A depth value is packed into 32 bit RGBA.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBADepthPacking = 3201;\r\n\r\n/**\r\n * A depth value is packed into 24 bit RGB.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBDepthPacking = 3202;\r\n\r\n/**\r\n * A depth value is packed into 16 bit RG.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGDepthPacking = 3203;\r\n\r\n/**\r\n * Normal information is relative to the underlying surface.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const TangentSpaceNormalMap = 0;\r\n\r\n/**\r\n * Normal information is relative to the object orientation.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ObjectSpaceNormalMap = 1;\r\n\r\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\r\n\r\n/**\r\n * No color space.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const NoColorSpace = '';\r\n\r\n/**\r\n * sRGB color space.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const SRGBColorSpace = 'srgb';\r\n\r\n/**\r\n * sRGB-linear color space.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const LinearSRGBColorSpace = 'srgb-linear';\r\n\r\n/**\r\n * Linear transfer function.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const LinearTransfer = 'linear';\r\n\r\n/**\r\n * sRGB transfer function.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const SRGBTransfer = 'srgb';\r\n\r\n/**\r\n * Sets the stencil buffer value to `0`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ZeroStencilOp = 0;\r\n\r\n/**\r\n * Keeps the current value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const KeepStencilOp = 7680;\r\n\r\n/**\r\n * Sets the stencil buffer value to the specified reference value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ReplaceStencilOp = 7681;\r\n\r\n/**\r\n * Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const IncrementStencilOp = 7682;\r\n\r\n/**\r\n * Decrements the current stencil buffer value. Clamps to `0`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DecrementStencilOp = 7683;\r\n\r\n/**\r\n * Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing\r\n * the maximum representable unsigned value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const IncrementWrapStencilOp = 34055;\r\n\r\n/**\r\n * Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable\r\n * unsigned value when decrementing a stencil buffer value of `0`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DecrementWrapStencilOp = 34056;\r\n\r\n/**\r\n * Inverts the current stencil buffer value bitwise.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const InvertStencilOp = 5386;\r\n\r\n/**\r\n * Will never return true.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NeverStencilFunc = 512;\r\n\r\n/**\r\n * Will return true if the stencil reference value is less than the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessStencilFunc = 513;\r\n\r\n/**\r\n * Will return true if the stencil reference value is equal to the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EqualStencilFunc = 514;\r\n\r\n/**\r\n * Will return true if the stencil reference value is less than or equal to the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessEqualStencilFunc = 515;\r\n\r\n/**\r\n * Will return true if the stencil reference value is greater than the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterStencilFunc = 516;\r\n\r\n/**\r\n * Will return true if the stencil reference value is not equal to the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NotEqualStencilFunc = 517;\r\n\r\n/**\r\n * Will return true if the stencil reference value is greater than or equal to the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterEqualStencilFunc = 518;\r\n\r\n/**\r\n * Will always return true.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AlwaysStencilFunc = 519;\r\n\r\n/**\r\n * Never pass.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NeverCompare = 512;\r\n\r\n/**\r\n * Pass if the incoming value is less than the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessCompare = 513;\r\n\r\n/**\r\n * Pass if the incoming value equals the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EqualCompare = 514;\r\n\r\n/**\r\n * Pass if the incoming value is less than or equal to the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessEqualCompare = 515;\r\n\r\n/**\r\n * Pass if the incoming value is greater than the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterCompare = 516;\r\n\r\n/**\r\n * Pass if the incoming value is not equal to the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NotEqualCompare = 517;\r\n\r\n/**\r\n * Pass if the incoming value is greater than or equal to the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterEqualCompare = 518;\r\n\r\n/**\r\n * Always pass.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AlwaysCompare = 519;\r\n\r\n/**\r\n * The contents are intended to be specified once by the application, and used many\r\n * times as the source for drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StaticDrawUsage = 35044;\r\n\r\n/**\r\n * The contents are intended to be respecified repeatedly by the application, and\r\n * used many times as the source for drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DynamicDrawUsage = 35048;\r\n\r\n/**\r\n * The contents are intended to be specified once by the application, and used at most\r\n * a few times as the source for drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StreamDrawUsage = 35040;\r\n\r\n/**\r\n * The contents are intended to be specified once by reading data from the 3D API, and queried\r\n * many times by the application.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StaticReadUsage = 35045;\r\n\r\n/**\r\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and queried\r\n * many times by the application.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DynamicReadUsage = 35049;\r\n\r\n/**\r\n * The contents are intended to be specified once by reading data from the 3D API, and queried at most\r\n * a few times by the application\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StreamReadUsage = 35041;\r\n\r\n/**\r\n * The contents are intended to be specified once by reading data from the 3D API, and used many times as\r\n * the source for WebGL drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StaticCopyUsage = 35046;\r\n\r\n/**\r\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and used many times\r\n * as the source for WebGL drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DynamicCopyUsage = 35050;\r\n\r\n/**\r\n * The contents are intended to be specified once by reading data from the 3D API, and used at most a few times\r\n * as the source for WebGL drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StreamCopyUsage = 35042;\r\n\r\n/**\r\n * GLSL 1 shader code.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const GLSL1 = '100';\r\n\r\n/**\r\n * GLSL 3 shader code.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const GLSL3 = '300 es';\r\n\r\n/**\r\n * WebGL coordinate system.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const WebGLCoordinateSystem = 2000;\r\n\r\n/**\r\n * WebGPU coordinate system.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const WebGPUCoordinateSystem = 2001;\r\n\r\n/**\r\n * Represents the different timestamp query types.\r\n *\r\n * @type {ConstantsTimestampQuery}\r\n * @constant\r\n */\r\nexport const TimestampQuery = {\r\n\tCOMPUTE: 'compute',\r\n\tRENDER: 'render'\r\n};\r\n\r\n/**\r\n * Represents mouse buttons and interaction types in context of controls.\r\n *\r\n * @type {ConstantsInterpolationSamplingType}\r\n * @constant\r\n */\r\nexport const InterpolationSamplingType = {\r\n\tPERSPECTIVE: 'perspective',\r\n\tLINEAR: 'linear',\r\n\tFLAT: 'flat'\r\n};\r\n\r\n/**\r\n * Represents the different interpolation sampling modes.\r\n *\r\n * @type {ConstantsInterpolationSamplingMode}\r\n * @constant\r\n */\r\nexport const InterpolationSamplingMode = {\r\n\tNORMAL: 'normal',\r\n\tCENTROID: 'centroid',\r\n\tSAMPLE: 'sample',\r\n\tFIRST: 'first',\r\n\tEITHER: 'either'\r\n};\r\n\r\n/**\r\n * This type represents mouse buttons and interaction types in context of controls.\r\n *\r\n * @typedef {Object} ConstantsMouse\r\n * @property {number} MIDDLE - The left mouse button.\r\n * @property {number} LEFT - The middle mouse button.\r\n * @property {number} RIGHT - The right mouse button.\r\n * @property {number} ROTATE - A rotate interaction.\r\n * @property {number} DOLLY - A dolly interaction.\r\n * @property {number} PAN - A pan interaction.\r\n **/\r\n\r\n/**\r\n * This type represents touch interaction types in context of controls.\r\n *\r\n * @typedef {Object} ConstantsTouch\r\n * @property {number} ROTATE - A rotate interaction.\r\n * @property {number} PAN - A pan interaction.\r\n * @property {number} DOLLY_PAN - The dolly-pan interaction.\r\n * @property {number} DOLLY_ROTATE - A dolly-rotate interaction.\r\n **/\r\n\r\n/**\r\n * This type represents the different timestamp query types.\r\n *\r\n * @typedef {Object} ConstantsTimestampQuery\r\n * @property {string} COMPUTE - A `compute` timestamp query.\r\n * @property {string} RENDER - A `render` timestamp query.\r\n **/\r\n\r\n/**\r\n * Represents the different interpolation sampling types.\r\n *\r\n * @typedef {Object} ConstantsInterpolationSamplingType\r\n * @property {string} PERSPECTIVE - Perspective-correct interpolation.\r\n * @property {string} LINEAR - Linear interpolation.\r\n * @property {string} FLAT - Flat interpolation.\r\n */\r\n\r\n/**\r\n * Represents the different interpolation sampling modes.\r\n *\r\n * @typedef {Object} ConstantsInterpolationSamplingMode\r\n * @property {string} NORMAL - Normal sampling mode.\r\n * @property {string} CENTROID - Centroid sampling mode.\r\n * @property {string} SAMPLE - Sample-specific sampling mode.\r\n * @property {string} FIRST - Flat interpolation using the first vertex.\r\n * @property {string} EITHER - Flat interpolation using either vertex.\r\n */\r\n", "import { AlphaFormat, RedFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBFormat, RGBAFormat, RGBAIntegerFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_BPTC_Format, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, UnsignedByteType, ByteType, UnsignedShortType, ShortType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedIntType, IntType, FloatType, UnsignedInt5999Type, UnsignedInt101111Type } from '../constants.js';\r\n\r\n/**\r\n * Scales the texture as large as possible within its surface without cropping\r\n * or stretching the texture. The method preserves the original aspect ratio of\r\n * the texture. Akin to CSS `object-fit: contain`\r\n *\r\n * @param {Texture} texture - The texture.\r\n * @param {number} aspect - The texture's aspect ratio.\r\n * @return {Texture} The updated texture.\r\n */\r\nfunction contain( texture, aspect ) {\r\n\r\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\r\n\r\n\tif ( imageAspect > aspect ) {\r\n\r\n\t\ttexture.repeat.x = 1;\r\n\t\ttexture.repeat.y = imageAspect / aspect;\r\n\r\n\t\ttexture.offset.x = 0;\r\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\r\n\r\n\t} else {\r\n\r\n\t\ttexture.repeat.x = aspect / imageAspect;\r\n\t\ttexture.repeat.y = 1;\r\n\r\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\r\n\t\ttexture.offset.y = 0;\r\n\r\n\t}\r\n\r\n\treturn texture;\r\n\r\n}\r\n\r\n/**\r\n * Scales the texture to the smallest possible size to fill the surface, leaving\r\n * no empty space. The method preserves the original aspect ratio of the texture.\r\n * Akin to CSS `object-fit: cover`.\r\n *\r\n * @param {Texture} texture - The texture.\r\n * @param {number} aspect - The texture's aspect ratio.\r\n * @return {Texture} The updated texture.\r\n */\r\nfunction cover( texture, aspect ) {\r\n\r\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\r\n\r\n\tif ( imageAspect > aspect ) {\r\n\r\n\t\ttexture.repeat.x = aspect / imageAspect;\r\n\t\ttexture.repeat.y = 1;\r\n\r\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\r\n\t\ttexture.offset.y = 0;\r\n\r\n\t} else {\r\n\r\n\t\ttexture.repeat.x = 1;\r\n\t\ttexture.repeat.y = imageAspect / aspect;\r\n\r\n\t\ttexture.offset.x = 0;\r\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\r\n\r\n\t}\r\n\r\n\treturn texture;\r\n\r\n}\r\n\r\n/**\r\n * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\r\n *\r\n * @param {Texture} texture - The texture.\r\n * @return {Texture} The updated texture.\r\n */\r\nfunction fill( texture ) {\r\n\r\n\ttexture.repeat.x = 1;\r\n\ttexture.repeat.y = 1;\r\n\r\n\ttexture.offset.x = 0;\r\n\ttexture.offset.y = 0;\r\n\r\n\treturn texture;\r\n\r\n}\r\n\r\n/**\r\n * Determines how many bytes must be used to represent the texture.\r\n *\r\n * @param {number} width - The width of the texture.\r\n * @param {number} height - The height of the texture.\r\n * @param {number} format - The texture's format.\r\n * @param {number} type - The texture's type.\r\n * @return {number} The byte length.\r\n */\r\nfunction getByteLength( width, height, format, type ) {\r\n\r\n\tconst typeByteLength = getTextureTypeByteLength( type );\r\n\r\n\tswitch ( format ) {\r\n\r\n\t\t// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\r\n\t\tcase AlphaFormat:\r\n\t\t\treturn width * height;\r\n\t\tcase RedFormat:\r\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RedIntegerFormat:\r\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGFormat:\r\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGIntegerFormat:\r\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGBFormat:\r\n\t\t\treturn ( ( width * height * 3 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGBAFormat:\r\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\t\tcase RGBAIntegerFormat:\r\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\r\n\t\tcase RGB_S3TC_DXT1_Format:\r\n\t\tcase RGBA_S3TC_DXT1_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\r\n\t\tcase RGBA_S3TC_DXT3_Format:\r\n\t\tcase RGBA_S3TC_DXT5_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\r\n\t\tcase RGB_PVRTC_2BPPV1_Format:\r\n\t\tcase RGBA_PVRTC_2BPPV1_Format:\r\n\t\t\treturn ( Math.max( width, 16 ) * Math.max( height, 8 ) ) / 4;\r\n\t\tcase RGB_PVRTC_4BPPV1_Format:\r\n\t\tcase RGBA_PVRTC_4BPPV1_Format:\r\n\t\t\treturn ( Math.max( width, 8 ) * Math.max( height, 8 ) ) / 2;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\r\n\t\tcase RGB_ETC1_Format:\r\n\t\tcase RGB_ETC2_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\r\n\t\tcase RGBA_ETC2_EAC_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\r\n\t\tcase RGBA_ASTC_4x4_Format:\r\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\r\n\t\tcase RGBA_ASTC_5x4_Format:\r\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\r\n\t\tcase RGBA_ASTC_5x5_Format:\r\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\r\n\t\tcase RGBA_ASTC_6x5_Format:\r\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\r\n\t\tcase RGBA_ASTC_6x6_Format:\r\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\r\n\t\tcase RGBA_ASTC_8x5_Format:\r\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\r\n\t\tcase RGBA_ASTC_8x6_Format:\r\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\r\n\t\tcase RGBA_ASTC_8x8_Format:\r\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\r\n\t\tcase RGBA_ASTC_10x5_Format:\r\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\r\n\t\tcase RGBA_ASTC_10x6_Format:\r\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\r\n\t\tcase RGBA_ASTC_10x8_Format:\r\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\r\n\t\tcase RGBA_ASTC_10x10_Format:\r\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\r\n\t\tcase RGBA_ASTC_12x10_Format:\r\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\r\n\t\tcase RGBA_ASTC_12x12_Format:\r\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 11 ) / 12 ) * 16;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\r\n\t\tcase RGBA_BPTC_Format:\r\n\t\tcase RGB_BPTC_SIGNED_Format:\r\n\t\tcase RGB_BPTC_UNSIGNED_Format:\r\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\r\n\r\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\r\n\t\tcase RED_RGTC1_Format:\r\n\t\tcase SIGNED_RED_RGTC1_Format:\r\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 8;\r\n\t\tcase RED_GREEN_RGTC2_Format:\r\n\t\tcase SIGNED_RED_GREEN_RGTC2_Format:\r\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\r\n\r\n\t}\r\n\r\n\tthrow new Error(\r\n\t\t`Unable to determine texture byte length for ${format} format.`,\r\n\t);\r\n\r\n}\r\n\r\nfunction getTextureTypeByteLength( type ) {\r\n\r\n\tswitch ( type ) {\r\n\r\n\t\tcase UnsignedByteType:\r\n\t\tcase ByteType:\r\n\t\t\treturn { byteLength: 1, components: 1 };\r\n\t\tcase UnsignedShortType:\r\n\t\tcase ShortType:\r\n\t\tcase HalfFloatType:\r\n\t\t\treturn { byteLength: 2, components: 1 };\r\n\t\tcase UnsignedShort4444Type:\r\n\t\tcase UnsignedShort5551Type:\r\n\t\t\treturn { byteLength: 2, components: 4 };\r\n\t\tcase UnsignedIntType:\r\n\t\tcase IntType:\r\n\t\tcase FloatType:\r\n\t\t\treturn { byteLength: 4, components: 1 };\r\n\t\tcase UnsignedInt5999Type:\r\n\t\tcase UnsignedInt101111Type:\r\n\t\t\treturn { byteLength: 4, components: 3 };\r\n\r\n\t}\r\n\r\n\tthrow new Error( `Unknown texture type ${type}.` );\r\n\r\n}\r\n\r\n/**\r\n * A class containing utility functions for textures.\r\n *\r\n * @hideconstructor\r\n */\r\nclass TextureUtils {\r\n\r\n\t/**\r\n\t * Scales the texture as large as possible within its surface without cropping\r\n\t * or stretching the texture. The method preserves the original aspect ratio of\r\n\t * the texture. Akin to CSS `object-fit: contain`\r\n\t *\r\n\t * @param {Texture} texture - The texture.\r\n\t * @param {number} aspect - The texture's aspect ratio.\r\n\t * @return {Texture} The updated texture.\r\n\t */\r\n\tstatic contain( texture, aspect ) {\r\n\r\n\t\treturn contain( texture, aspect );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Scales the texture to the smallest possible size to fill the surface, leaving\r\n\t * no empty space. The method preserves the original aspect ratio of the texture.\r\n\t * Akin to CSS `object-fit: cover`.\r\n\t *\r\n\t * @param {Texture} texture - The texture.\r\n\t * @param {number} aspect - The texture's aspect ratio.\r\n\t * @return {Texture} The updated texture.\r\n\t */\r\n\tstatic cover( texture, aspect ) {\r\n\r\n\t\treturn cover( texture, aspect );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\r\n\t *\r\n\t * @param {Texture} texture - The texture.\r\n\t * @return {Texture} The updated texture.\r\n\t */\r\n\tstatic fill( texture ) {\r\n\r\n\t\treturn fill( texture );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Determines how many bytes must be used to represent the texture.\r\n\t *\r\n\t * @param {number} width - The width of the texture.\r\n\t * @param {number} height - The height of the texture.\r\n\t * @param {number} format - The texture's format.\r\n\t * @param {number} type - The texture's type.\r\n\t * @return {number} The byte length.\r\n\t */\r\n\tstatic getByteLength( width, height, format, type ) {\r\n\r\n\t\treturn getByteLength( width, height, format, type );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { contain, cover, fill, getByteLength, TextureUtils };\r\n"],
  "mappings": "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",
  "names": []
}
